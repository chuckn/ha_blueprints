blueprint:
  name: Native Hue Tap Dial Sonos Controller
  description: "Use Philips Tap Dial to control Sonos.
    Sensor for Philips Hue Tap dial switch to use - just select the battery sensor that is exposed

  domain: automation
  input:
    button_sensor:
      name: Philips Hue Tap dial switch sensor entity
      description:
        Sensor for Philips Hue Tap dial switch to use - just select the battery sensor that is exposed
      selector:
        entity:
          multiple: false
          filter:
            - domain: sensor
              integration: hue

    sonos_controller:
      name: Sonos controller device
      description: The sonos controller that this tap dial will operate
      selector:
        entity:
          multiple: false
          filter:
            - domain: media_player
              integration: sonos
    volume_dial_fast:
      name: Fast dial volume increase/decrease
      description: How fast the volume is increase or decreased when dialing fast. The range is 0.0 to 1.0
      default: 0.1
      selector:
        number:
          min: 0
          max: 1
          step: 0.01
    volume_dial_slow:
      name: Slow dial volume increase/decrease
      description: How fast the volume is increase or decreased when dialing slow. The range is 0.0 to 1.0
      default: 0.05
      selector:
        number:
          min: 0
          max: 1
          step: 0.01
    volume_dial_step:
      name: Single step dial volume increase/decrease
      description: How fast the volume is increase or decreased when dialing a single step at a time. The range is 0.0 to 1.0
      default: 0.01
      selector:
        number:
          min: 0
          max: 1
          step: 0.01

variables:
  sonos_controller: !input sonos_controller
  button_sensor: !input button_sensor
  volume_dial_fast: !input volume_dial_fast
  volume_dial_slow: !input volume_dial_slow
  volume_dial_step: !input volume_dial_step

mode: parallel
#max_exceeded: silent
trigger:
  - platform: event
    event_type: hue_event
condition:
  - condition: template
    value_template: >-
      {{trigger.event.data.device_id == device_id(tap_dial_used)}}

action:
  - variables:
      #action: "{{ trigger.to_state.state }}"
      action: "{{ trigger.event.data.type }}"
      action_sub: "{{ trigger.event.data.subtype }}"
      action_steps: "{{ trigger.event.data.steps }}"
  - choose:
      #BUTTON 1
      - conditions:
          - condition: template
            value_template: "{{ action == 'short_release' }}"
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ action_sub == 1 }}"
                sequence:
                  - service: input_text.set_value
                    metadata: {}
                    data:
                      value: !input media_controller
                    target:
                      entity_id: !input helper_input

      - conditions: "{{ action == 'button_1_press_release' }}"
        sequence:
          - service: media_player.media_play_pause
            target:
              entity_id: !input sonos_controller

      # - conditions: "{{ action == 'button_1_hold' }}"
      #   sequence: !input remote_button_1_hold

      #BUTTON 2
      - conditions: "{{ action == 'button_2_press_release' }}"
        sequence:
          - service: media_player.media_play_pause
            target:
              entity_id: !input sonos_controller

      # - conditions: "{{ action == 'button_2_hold' }}"
      #   sequence: !input remote_button_2_hold

      # #BUTTON 3
      - conditions: "{{ action == 'button_3_press_release' }}"
        sequence:
          - service: media_player.media_previous_track
            target:
              entity_id: !input sonos_controller

      # - conditions: "{{ action == 'button_3_hold' }}"
      #   sequence: !input remote_button_3_hold

      #BUTTON 4
      - conditions: "{{ action == 'button_4_press_release' }}"
        sequence:
          - service: media_player.media_next_track
            target:
              entity_id: !input sonos_controller
      # - conditions: "{{ action == 'button_4_hold' }}"
      #   sequence: !input remote_button_4_hold

      # DIAL LEFT
      - conditions: "{{ action == 'dial_rotate_left_step' }}"
        sequence:
          - repeat:
              count: >-
                {{ state_attr(sonos_controller, 'group_members') | length
                }}
              sequence:
                - service: media_player.volume_set
                  data:
                    volume_level: >-
                      {{ [state_attr(state_attr(sonos_controller,
                      'group_members')[repeat.index - 1], 'volume_level') - volume_dial_step,
                      0] | max | float }}
                  target:
                    entity_id: >-
                      {{ state_attr(sonos_controller,
                      'group_members')[repeat.index - 1] }}

      - conditions:
          - condition: template
            value_template: "{{ action == 'long_press' }}"
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ action_sub == 1 }}"
                sequence:
                  - service: media_player.media_play_pause
                    metadata: {}
                    target:
                      entity_id: !input media_controller
                    data: {}

      - conditions: "{{ action == 'dial_rotate_left_slow' }}"
        sequence:
          - repeat:
              count: >-
                {{ state_attr(sonos_controller, 'group_members') | length
                }}
              sequence:
                - service: media_player.volume_set
                  data:
                    volume_level: >-
                      {{ [state_attr(state_attr(sonos_controller,
                      'group_members')[repeat.index - 1], 'volume_level') - volume_dial_slow,
                      0] | max | float }}
                  target:
                    entity_id: >-
                      {{ state_attr(sonos_controller,
                      'group_members')[repeat.index - 1] }}

      - conditions: "{{ action == 'dial_rotate_left_fast' }}"
        sequence:
          - repeat:
              count: >-
                {{ state_attr(sonos_controller, 'group_members') | length
                }}
              sequence:
                - service: media_player.volume_set
                  data:
                    volume_level: >-
                      {{ [state_attr(state_attr(sonos_controller,
                      'group_members')[repeat.index - 1], 'volume_level') - volume_dial_fast,
                      0] | max | float }}
                  target:
                    entity_id: >-
                      {{ state_attr(sonos_controller,
                      'group_members')[repeat.index - 1] }}

      # DIAL RIGHT
      - conditions:
          - condition: template
            value_template: "{{ action_sub == 'clock_wise' }}"
        sequence:
          - if:
              - condition: template
                value_template: "{{ states(helper_input)[:5] == 'media'}}"
            then:
              - service: media_player.volume_set
                metadata: {}
                data:
                  volume_level: >-
                    {{state_attr(states(helper_input),
                    'volume_level') + (trigger.event.data.steps / 1500)}}
                target:
                  entity_id: !input media_controller
            else:
              - service: light.turn_on
                metadata: {}
                data:
                  brightness_step_pct: "{{ (trigger.event.data.steps / 1500)* 100 }}"
                target:
                  entity_id: "{{ states(helper_input) }}"
      - conditions:
          - condition: template
            value_template: "{{ action_sub == 'counter_clock_wise' }}"
        sequence:
          - if:
              - condition: template
                value_template: "{{ states(helper_input)[:5] == 'media'}}"
            then:
              - service: media_player.volume_set
                metadata: {}
                data:
                  volume_level: >-
                    {{state_attr(states(helper_input),
                    'volume_level') - (trigger.event.data.steps / 1500)}}
                target:
                  entity_id: "{{ states(helper_input) }}"
            else:
              - service: light.turn_on
                metadata: {}
                data:
                  brightness_step_pct: "{{ (trigger.event.data.steps / 1500)* -100 }}"
                target:
                  entity_id: "{{ states(helper_input) }}"
max: 15
